library(lme4)
library(Rankcluster)
library(VennDiagram)
restRPsny <- 27698
restIDRsny <- 38346
restSnyRPIDR <- 27349
##MAX Myers Venn
maxRPMye <- 41288
maxIDRMye <- 50601
RPIDRMye1 <- 39467
draw.pairwise.venn(maxRPMye, maxIDRMye, RPIDRMye1, col = c('red', 'blue'),
fill = c('red', 'blue'), category = c('RP', 'IDRMyers'),
scaled = TRUE )
maxIDRSnye <- 32794
RPIDRMye2 <- 26789
maxIDRov <- 28301
maxIDRMyeallIDR <-26549
##MAX snyder venn
maxRPSny <- 27413
maxRPIDRSny <- 25579
draw.pairwise.venn(maxRPSny, maxIDRSnye, maxRPIDRSny, col = c('red', 'blue'),
fill = c('red', 'blue'), category = c('RP', 'IDRMyers'),
scaled = TRUE )
#Venn Representation
draw.pairwise.venn(maxmin2RPEnrich[6, 3], maxPos, maxmin2RPEnrich[6,2],col=c('red', 'blue'), fill=c('red', 'blue'), alpha=c(0.5, 0.5))
library(ggplot2)
library(VennDiagram)
maxPos <- 226
restPos <- 107
srfPos <- 111
pvals <- c(0.01, 0.05, 0.1, 0.15, 0.2, 0.5)
maxSnyIDREnrich <- read.csv('MAX_snyderIDR.csv', row.names =1)
maxSnyIDRdf <- data.frame(t(rbind(pvals, (maxSnyIDREnrich['0',]/maxSnyIDREnrich['1',]))))
maxMyeIDREnrich <- read.csv('MAX_myersIDR.csv', row.names =1)
maxMyeIDRdf <- data.frame(t(rbind(pvals, (maxMyeIDREnrich['0',]/maxMyeIDREnrich['1',]))))
maxMyeRPEnrich <- data.frame(t(read.csv('MAX_myersRP.csv', row.names =1)))
maxSnyRPEnrich <- data.frame(t(read.csv('MAX_snyderRP.csv', row.names =1)))
maxmin4RPEnrich <-data.frame(t(read.csv('MAX_RP_min4.csv', row.names =1)))
maxmin3RPEnrich <- data.frame(t(read.csv('MAX_RP_min3.csv', row.names=1)))
seq(0.01, 1, 0.01)
ln(seq(0.01, 1, 0.01))
log(seq(0.01, 1, 0.01))
log(10)
log(exp())
log(e
)
log(2.3)
shan <- function(probs = seq(0.0001, 1, 0.0001)){
lp <- log(probs)
e <- exp(-sum(probs*lp))
return(e)
}
shan
shan(probs=seq(0.001, 0.999, 0.001))
log(seq(0.01, 1, 0.01))*seq(0.01, 1, 0.01)
rand(0.001, 0.999, 10000)
random(0.001, 0.999, 10000)
randu(0.001, 0.999, 10000)
shan(probs=runif(10000, 0.001, 0.999))
shan(probs=runif(6, 0.001, 0.999))
shan(probs=runif(20, 0.001, 0.999))
shan(probs=runif(20, 0.5, 0.999))
if(1==1){}
if(1==1){print('TRUE')}
runif(20, 0.5, 0.999)^0.5
runif(20, 0.5, 0.999)^5
runif(20, 0.5, 0.999)^10000
shan <- function(probs = seq(0.0001, 1, 0.0001, q = 1)){
if(q==1{
lp <- log(probs)
D <- exp(-sum(probs*lp))
}
else{
D <- sum(probs^q)^(1/(1-q))
}
return(D)
}
shan <- function(probs = seq(0.0001, 1, 0.0001, q = 1)){
if(q==1){
lp <- log(probs)
D <- exp(-sum(probs*lp))
}
else{
D <- sum(probs^q)^(1/(1-q))
}
return(D)
}
shan(probs=runif(10000, 0.001, 0.999), q=2)
shan <- function(probs = seq(0.0001, 1, 0.0001), q = 1){
if(q==1){
lp <- log(probs)
D <- exp(-sum(probs*lp))
}
else{
D <- sum(probs^q)^(1/(1-q))
}
return(D)
}
shan(probs=runif(10000, 0.001, 0.999), q=2)
shan(probs=runif(10000, 0.001, 0.999), q=1.5)
shan(probs=runif(10000, 0.001, 0.999), q=0.5)
shan(probs=runif(10000, 0.001, 0.999), q=0)
shan(probs=runif(10000, 0.001, 0.999), q=1)
shan(probs=runif(6, 0.001, 0.999), q=1)
shan(probs=runif(6, 0.001, 0.999), q=1)
shan(probs=runif(6, 0.001, 0.999), q=1)
shan(probs=runif(20, 0.001, 0.999), q=1)
shan(probs=runif(20, 0.001, 0.999), q=1)
shan(probs=runif(20, 0.001, 0.999), q=1)
shan(probs=runif(20, 0.1, 0.5), q=1)
shan(probs=runif(20, 0.1, 0.5), q=1)
shan(probs=runif(20, 0.1, 0.5), q=1)
shan(probs=runif(20, 0.1, 0.5), q=1)
shan(probs=runif(20, 0.1, 0.5), q=1)
shan(probs=runif(20, 0.001, 0.5), q=1)
shan(probs=runif(20, 0.001, 0.5), q=1)
shan(probs=runif(20, 0.001, 0.5), q=1)
shan(probs=runif(200, 0.1, 0.5), q=1)
shan(probs=runif(200, 0.1, 0.5), q=1)
shan(probs=runif(200, 0.1, 0.5), q=1)
shan(probs=runif(20, 0.1, 0.5), q=2)
shan(probs=runif(20, 0.1, 0.5), q=2)
shan(probs=runif(20, 0.1, 0.5), q=2)
shan(probs=runif(20, 0.1, 0.5), q=2)
shan(probs=runif(20, 0.1, 0.5), q=2)
shan(probs=runif(20, 0.1, 0.5), q=2)
shan(probs=runif(20, 0.1, 0.5), q=2)
shan(probs=runif(20, 0.1, 0.5), q=2)
shan(probs=runif(20, 0.1, 0.5), q=2)
shan(probs=runif(20, 0.1, 0.5), q=2)
shan(probs=runif(20, 0.1, 0.5), q=2)
shan(probs=runif(20, 0.1, 0.5), q=2)
shan(probs=runif(20, 0.1, 0.5), q=1.5)
shan(probs=runif(20, 0.1, 0.5), q=1.5)
shan(probs=runif(20, 0.1, 0.5), q=1.5)
shan(probs=runif(20, 0.1, 0.5), q=1.5)
shan(probs=runif(20, 0.1, 0.5), q=1.5)
shan(probs=runif(20, 0.1, 0.5), q=10000)
shan(probs=runif(20, 0.1, 0.5), q=10)
shan(probs=runif(20, 0.1, 0.5), q=10)
shan(probs=runif(200000, 0.1, 0.5), q=0.1)
shan(probs=runif(200000, 0.1, 0.5), q=0.5)
shan(probs=runif(200000, 0.1, 0.5), q=1)
shan(probs=runif(200000, 0.1, 0.5), q=0.05)
shan(probs=runif(200000, 0.1, 0.5), q=0.0001)
shan <- function(probs = seq(0.0001, 1, 0.0001), q = 1){
if(q==1){
lp <- log(probs)
D <- exp(-sum(probs*lp))
}
else{
D <- (sum(probs^q))^(1/(1-q))
}
return(D)
}
shan(probs=runif(200000, 0.1, 0.5), q=0.0001)
shan(probs=runif(200000, 0.1, 0.5), q=1)
shan(probs=runif(200000, 0.1, 0.5), q=2)
shan(probs=runif(200000, 0.98, 0.99), q=2)
shan(probs=runif(200000, 0.98, 0.99), q=1)
shan(probs=runif(20, 0.98, 0.99), q=2)
shan(probs=runif(20, 0.98, 0.99), q=1)
shan(probs=runif(20, 0.98, 0.99), q=0)
shan <- function(counts, q = 1){
probs <- counts/sum(counts)
if(q==1){
lp <- log(probs)
D <- exp(-sum(probs*lp))
}
else{
D <- (sum(probs^q))^(1/(1-q))
}
return(D)
}
shan(probs=runif(200, 1, 20), q=1)
shan(counts=runif(200, 1, 20), q=1)
shan(counts=runif(200, 1, 20), q=2)
shan(counts=runif(200, 1, 20), q=0.1)
shan(counts=runif(200, 1, 4), q=0.1)
shan(counts=runif(200000, 1, 4), q=0.1)
shan(counts=runif(200000, 1, 4), q=1)
shan(counts=runif(200000, 1, 200), q=1)
shan(counts=c(12, 3, 2, 2, 1), q=1)
shan(counts=c(12, 3, 2, 2, 1), q=0.5)
shan(counts=c(12, 3, 2, 2, 1), q=1.5)
shan(counts=c(12, 3, 2, 2, 1), q=2)
shan(counts=c(12, 3, 2, 2, 1), q=3)
shan(counts=c(12, 3, 2, 2, 1), q=10)
shan(counts=c(12, 3, 2, 2, 1), q=1)
shan <- function(counts, q = 1){
probs <- counts/sum(counts)
if(q==1){
lp <- log(probs)
D <- exp(-sum(probs*lp))
}
else{
D <- (sum(probs^q))^(1/(1-q))
}
return(D)
}
shan(c(12, 2, 2))
shan(c(12, 4, 3, 1))
shan(c(14, 2, 3, 1))
shan(c(12, 2,2,  3, 1))
shan(c(3, 1))
shan(c(4, 2))
shan(c(4, 1))
shan(c(3, 1))
shan(c(12, 4, 3, 1))
shan(c(13, 3, 3, 4, 2))
shan(c(13, 3, 3, 4))
shan(c(13, 3, 3, 4, 2))
shan(c(13, 3, 3, 6))
shan(c(13, 3, 3, 4, 2), 0.5)
shan(c(13, 3, 3, 4, 2), 0.1)
shan(c(12, 2,2,  3, 1) 0.5)
shan(c(12, 2,2,  3, 1), 0.5)
shan <- function(counts, q = 1){
probs <- counts/sum(counts)
if(q==1){
lp <- log(probs)
D <- exp(-sum(probs*lp))
}
else{
D <- (sum(probs^q))^(1/(1-q))
}
E <- D/length(counts)
return(D, E)
}
shan(c(12, 2,2,  3, 1), 0.5)
shan <- function(counts, q = 1){
probs <- counts/sum(counts)
if(q==1){
lp <- log(probs)
D <- exp(-sum(probs*lp))
}
else{
D <- (sum(probs^q))^(1/(1-q))
}
return(D)
}
shan(c(12, 2,2,  3, 1), 0.5)
4/5
a <- factor(c("character", "in", "the", "streets"))
b <- factor(c("integer", "in", "the", 'sheets'))
c(a, b)
a
b
install.packages("nmf")
install.packages("NMF")
library(data.table)
library(NMF)
library(ggplto2)
library(ggplot2)
test4 <- fread('../tests/test4.tsv')
setwd("C:/Users/Rhys/OneDrive - The University of Queensland/06-strain_resolving/pystrain/pystrain")
test4 <- fread('../tests/test4.tsv')
test4
test4.T
T(test4)
